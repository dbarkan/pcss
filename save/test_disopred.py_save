import unittest
import configobj
import pcssTools
import pcssPeptide
import pcssFeatures
import pcssFeatureHandlers
import pcssErrors
import logging
import sys
import pcssTests

logging.basicConfig(stream=sys.stdout)
logging.root.setLevel(logging.DEBUG)

class TestDisopred(pcssTests.TestSequenceFeatures):

    def setUp(self):
        self.name = "disopred"

    def donttest_found_disopred_file(self):
        print "testing found disopred file"
        configFile = "testConfig/testPcssConfig.txt"
        
        pcssConfig = configobj.ConfigObj(configFile)
        
        runner = pcssTools.PcssRunner(pcssConfig)
        
        disopredFileHandler = pcssFeatureHandlers.DisopredFileHandler(pcssConfig, runner.pdh)

        self.assertTrue(disopredFileHandler.outputFileExists("39d0244382b7121b3d6645150e8b77feMRVTSLTA"))

    def donttest_parse_disopred_file(self):
        disopredTest = pcssTests.DisopredTest("testConfig/testPcssConfig.txt")

        disopredTest.proteins[0].processDisopred(disopredTest.disopredReader, disopredTest.disopredRunner)
        
        disopredCallString = disopredTest.proteins[0].disorderProteinCalls.makeFullCallString()
        self.assertEquals(disopredCallString, disopredTest.getExpectedDisopredResult())

        peptide = disopredTest.proteins[0].peptides[59]

        self.assertEquals(peptide.features["disorder_string_feature"].getValueString(), "OOOODDDD")
        self.assertEquals(peptide.features["disorder_score_feature"].getValueString(), "0.01, 0.022, 0.039, 0.055, 0.118, 0.144, 0.153, 0.178")
        self.assertRaises(pcssErrors.FeatureException, disopredTest.proteins[0].disorderProteinCalls.getSequenceFeatureCall, 1000)
        #test for protein, peptide in all three

    def donttest_residue_mismatch(self):
        disopredTest = pcssTests.DisopredTest("testConfig/testPcssConfig.txt")

        disopredTest.disopredFileHandler.rootDataDir = "testInput/disopredErrors/residueMismatch/"

        self.assertRaises(pcssErrors.FeatureException, 
                          disopredTest.proteins[0].processDisopred, disopredTest.disopredReader, disopredTest.disopredRunner)
    
    def donttest_unexpected_call(self):
        disopredTest = pcssTests.DisopredTest("testConfig/testPcssConfig.txt")

        disopredTest.disopredFileHandler.rootDataDir = "testInput/disopredErrors/badCall/"

        self.assertRaises(pcssErrors.FeatureException, 
                          disopredTest.proteins[0].processDisopred, disopredTest.disopredReader, disopredTest.disopredRunner)

    def donttest_command_error(self):
        disopredTest = pcssTests.DisopredTest("testConfig/testPcssConfig.txt")
        disopredTest.setBadCommandData()
        self.assertRaises(pcssErrors.FeatureException, 
                          disopredTest.proteins[0].processDisopred, disopredTest.disopredReader, disopredTest.disopredRunner)
        #ADD CHECK FOR CWD
        

                    

if __name__ == '__main__':
    unittest.main()
