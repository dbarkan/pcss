import unittest
import configobj
import pcssTools
import pcssPeptide
import pcssFeatures
import pcssFeatureHandlers
import pcssErrors
import logging
import sys
import pcssTests
logging.basicConfig(stream=sys.stdout)
logging.root.setLevel(logging.DEBUG)

class TestPsipred(unittest.TestCase):
    
    def test_found_psipred_file(self):
        
        configFile = "testConfig/testPcssConfig.txt"
        
        pcssConfig = configobj.ConfigObj(configFile)
        
        runner = pcssTools.PcssRunner(pcssConfig)
        
        psipredFileHandler = pcssFeatureHandlers.PsipredFileHandler(pcssConfig, runner.pdh)

        self.assertTrue(psipredFileHandler.outputFileExists("39d0244382b7121b3d6645150e8b77feMRVTSLTA"))

    def test_parse_psipred_file(self):
        psipredTest = pcssTests.PsipredTest("testConfig/testPcssConfig.txt")

        psipredTest.proteins[0].processPsipred(psipredTest.psipredReader, psipredTest.psipredRunner)
        
        psipredCallString = psipredTest.proteins[0].psipredProteinCalls.makeFullCallString()
        self.assertEquals(psipredCallString, psipredTest.getExpectedPsipredResult())

        peptide = psipredTest.proteins[0].peptides[59]
        self.assertEquals(peptide.features["psipred_string_feature"].getValueString(), "BLLLLLLL")
        self.assertEquals(peptide.features["psipred_score_feature"].getValueString(), "0.305, 0.671, 0.849, 0.819, 0.773, 0.803, 0.854, 0.742")
        self.assertRaises(pcssErrors.FeatureException, psipredTest.proteins[0].psipredProteinCalls.getSequenceFeatureCall, 1000)

    def test_residue_mismatch(self):
        psipredTest = pcssTests.PsipredTest("testConfig/testPcssConfig.txt")

        psipredTest.psipredFileHandler.rootDataDir = "testInput/psipredErrors/residueMismatch/"

        self.assertRaises(pcssErrors.FeatureException, 
                          psipredTest.proteins[0].processPsipred, psipredTest.psipredReader, psipredTest.psipredRunner)
    
    def test_unexpected_call(self):
        psipredTest = pcssTests.PsipredTest("testConfig/testPcssConfig.txt")

        psipredTest.psipredFileHandler.rootDataDir = "testInput/psipredErrors/badCall/"

        self.assertRaises(pcssErrors.FeatureException, 
                          psipredTest.proteins[0].processPsipred, psipredTest.psipredReader, psipredTest.psipredRunner)

    def test_command_error(self):
        psipredTest = pcssTests.PsipredTest("testConfig/testPcssConfig.txt")
        psipredTest.setBadCommandData()
        self.assertRaises(pcssErrors.FeatureException, 
                          psipredTest.proteins[0].processPsipred, psipredTest.psipredReader, psipredTest.psipredRunner)



if __name__ == '__main__':
    unittest.main()
